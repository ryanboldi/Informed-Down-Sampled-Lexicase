<predefined> ::= 'b0 = bool(); b1 = bool(); b2 = bool()'
'i0 = int(); i1 = int(); i2 = int()'
'res0 = int()'
'whileLoopBreakCounter = int()'
<code>
<code> ::= <code><statement>'\n'|<statement>'\n'
<statement> ::= <simple_stmt>|<compound_stmt>
<simple_stmt> ::= <assign>
<compound_stmt> ::= 'while '<bool>' and whileLoopBreakCounter < 1000:{:\nwhileLoopBreakCounter += 1\n'<code>'\n:}'|'if '<bool>':{:\n'<code>':}'|'if '<bool>':{:\n'<code>':}else:{:\n'<code>':}'
<assign> ::= <bool_var>' = '<bool>|<int_assign>
<number> ::= <number><num>|<num>
<num> ::= '0'|'1'|'2'|'3'
<comp_op> ::= '<'|'>'|'=='|'>='|'<='|'!='
<bool_var> ::= 'b0'|'b1'|'b2'
<bool> ::= <bool_var>|<bool_const>|'not '<bool>|'( '<bool>' '<bool_op>' '<bool>' )'|<int>' '<comp_op>' '<int>
<bool_op> ::= 'and'|'or'
<bool_const> ::= 'True'|'False'
<int_var> ::= 'i0'|'i1'|'i2'|'in0'|'in1'|'res0'
<int_assign> ::= <int_var>' = '<int>|<int_var>' '<arith_ops>'= '<int>|'('<int_var>','<int_var>') = ('<int>','<int>')'
<int> ::= <int_var>|'int('<number>'.0)'|<arith_prefix><int>|'( '<int>' '<arith_ops>' '<int>' )'|<int_arith_ops_protected>'('<int>','<int>')'|'min('<int>', '<int>')'|'max('<int>', '<int>')'|'abs('<int>')'
<arith_ops> ::= '+'|'-'|'*'
<int_arith_ops_protected> ::= 'divInt'|'mod'
<arith_prefix> ::= '+'|'-'
